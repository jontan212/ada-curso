with Ada.Text_IO;               use Ada.Text_IO;
with Ada.Numerics.Float_Random; use Ada.Numerics.Float_Random;
with Ada.Float_Text_IO;         use Ada.Float_Text_IO;
procedure Main is

begin
   --  declare
   --    --type Montos is array (Integer range <>) of Float;
   --    type Dinero is digits 2;
   --    --Empieza en la posicion 1:
   --    type Montos is array (Positive range <>) of Dinero;
   --    --Empieza en la posicion 0:
   --    type Array_Natural is array (Natural range <>) of Dinero;
   --     --Empieza en la posicion Integer'First
   --     type Array_Integer is array (Integer range <>) of Dinero;
   --     --Inicializaciones
   --    --Ventas : Montos(1..5);
   --     Ventas : Montos := (10.0, 2.3, 6.7);
   --     Ventas_Natural_Range : Array_Natural := (4.5,3.4);
   --     Ventas_Integer_Range : Array_Integer := (6.7, 2.3);
   --  begin
   --    --  Insert code here.
   --    --Ventas(0) := 2.3; --Porque da error?
--     Put_Line("Primera Posicion (Positive range <>) " & Ventas'First'Image);
   --     Put_Line("Primera Posicion (Natural range <>) " & Ventas_Natural_Range'First'Image);
   --     Put_Line("Primera Posicion (Integer range <>) " & Ventas_Integer_Range'First'Image);
   --  end;

   --  declare
   --     --Declarar un tipo de Arreglo de Float (abierto/uncostrained)
   --     type Array_Float is array (Positive range <>) of Float;
   --
   --     --Declara una función que recibe un número N y me devuelve un arreglo
   --     --de N números al azar
   --     function Fill_Random (N : Integer) return Array_Float is
   --        Nuevo_Array : Array_Float (1 .. N);
   --        G           : Generator;
   --     begin
   --        for I in Nuevo_Array'Range loop
   --           Nuevo_Array (I) := Random (G) * 10.0 + 1.0;
   --        end loop;
   --        return Nuevo_Array;
   --     end Fill_Random;
   --
   --     --Declarar una función que recibe una rreglo de ese tipo me devuelve la sumatoria con 'First y 'Last
   --     function Sumatoria (Entrada : Array_Float) return Float is
   --        Retorno : Float := 0.0;
   --     begin
   --        for I in Entrada'Range loop
   --           Retorno := Retorno + Entrada (I);
   --        end loop;
   --        return Retorno;
   --     end Sumatoria;
   --
   --     --Declarar una función que recibe un arreglo de ese tipo y me devuelve la promedio
   --     function Promedio (Arreglo_Media : in Array_Float) return Float is
   --     begin
   --        return Sumatoria (Arreglo_Media) / Float (Arreglo_Media'Length);
   --     end Promedio;
   --
   --     -- Procedimiento muestre arreglo
   --     procedure Mostrar (Arr : Array_Float) is
   --     begin
   --        for I in Arr'Range loop
   --           Put (Arr (I), Exp => 0);
   --        end loop;
   --     end Mostrar;
   --
   --     --Mayores
   --     --Una función que reciba un array y un valor
   --     --Devuelve otro array con los valores mayores al parametro
   --     function Mayores
   --       (Arreglo : Array_Float; Valor : Float) return Array_Float
   --     is
   --        --Result:Array_Float(1..0); -- Un array vacío
   --        Aux : Array_Float :=
   --          Arreglo; -- copio el arreglo que tenga la misma longitud
   --        --  Indice_Mayores: range Array_Float'First .. Array_Float'Last;
   --        --subtype Tipo_Indice is Integer range Arreglo'Range;
   --        --Indice : Tipo_Indice := Arreglo'First;
   --        Indice : Integer := Arreglo'First;
   --
   --     begin
   --        for I in Arreglo'Range loop
   --           if Arreglo (I) > Valor then
   --              Aux (Indice) := Arreglo (I);
   --              Indice       := Indice + 1;
   --           end if;
   --        end loop;
   --
   --        declare
   --           Result : Array_Float
   --             (Arreglo'First .. Indice - 1); --Me puede quedar vacío
   --        begin
   --           Result := Aux (Arreglo'First .. Indice - 1); -- Slice
   --           return Result;
   --        end;
   --     end Mayores;
   --
   --     --  X            : Integer := 5;
   --     --  Array_Random : Array_Float (1 .. X);
   --
   --     Numeros : Array_Float := Fill_Random (10);
   --  begin
   --     --  Array_Random := Fill_Random (X);
   --     --  for I in Array_Random'Range loop
   --     --     Put_Line (Array_Random (I)'Image);
   --     --  end loop;
   --
   --     --  for I in reverse Numeros'Range loop
   --     --     Put (Numeros (I), Exp => 0);
   --     --     Put_Line ("");
   --     --  end loop;
   --       --  Mostrar (Numeros);
   --
   --     declare
   --        Mayores_A_5 : Array_Float := Mayores (Numeros, 5.0);
   --     begin
   --        Put_Line ("Los mayores a 5 son");
   --        Mostrar (Mayores_A_5);
   --     end;
   --  end;

   Put_Line ("hola");
end Main;
